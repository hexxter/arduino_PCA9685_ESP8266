/*  PCA9685 LED library for Arduino
    Copyright (C) 2012 Kasper Skårhøj    <kasperskaarhoj@gmail.com> 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "PCA9685.h"

#define PWM_VALUE 255
int gamma_table[PWM_VALUE+1] = {
   0,  0,  1,  1,  2,  3,  5,  6,  8, 10, 12, 14, 17, 19, 22, 25,
   28, 31, 35, 38, 42, 46, 50, 54, 58, 63, 67, 72, 77, 82, 87, 92,
   98,103,109,115,121,127,133,139,146,153,159,166,173,180,188,195,
  203,210,218,226,234,242,251,259,268,276,285,294,303,312,321,331,
  340,350,360,369,379,390,400,410,421,431,442,453,464,475,486,497,
  508,520,531,543,555,567,579,591,603,616,628,641,654,667,680,693,
  706,719,732,746,760,773,787,801,815,829,844,858,872,887,902,917,
  931,947,962,977,992,1008,1023,1039,1055,1071,1087,1103,1119,1135,1151,1168,
  1185,1201,1218,1235,1252,1269,1286,1304,1321,1339,1356,1374,1392,1410,1428,1446,
  1464,1483,1501,1520,1538,1557,1576,1595,1614,1633,1652,1672,1691,1711,1730,1750,
  1770,1790,1810,1830,1851,1871,1891,1912,1933,1953,1974,1995,2016,2037,2059,2080,
  2101,2123,2145,2166,2188,2210,2232,2254,2276,2299,2321,2344,2366,2389,2412,2435,
  2458,2481,2504,2527,2551,2574,2598,2621,2645,2669,2693,2717,2741,2765,2790,2814,
  2839,2863,2888,2913,2938,2963,2988,3013,3038,3063,3089,3114,3140,3166,3192,3218,
  3244,3270,3296,3322,3349,3375,3402,3428,3455,3482,3509,3536,3563,3590,3618,3645,
  3673,3700,3728,3756,3783,3811,3839,3868,3896,3924,3953,3981,4010,4038,4067,4096 };
    

/*#define PWM_VALUE 1023
int gamma_table[PWM_VALUE+1] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,
    5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,
    8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12,
   12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17,
   17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22,
   23, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 29, 29,
   30, 30, 31, 31, 31, 32, 32, 33, 33, 34, 35, 35, 36, 36, 37, 37,
   38, 38, 39, 39, 40, 41, 41, 42, 42, 43, 44, 44, 45, 45, 46, 47,
   47, 48, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57,
   58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 66, 67, 68, 69, 70,
   70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84,
   84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
  100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,
  117,119,120,121,122,123,124,126,127,128,129,130,132,133,134,135,
  137,138,139,140,142,143,144,146,147,148,150,151,152,154,155,156,
  158,159,161,162,163,165,166,168,169,170,172,173,175,176,178,179,
  181,182,184,185,187,188,190,192,193,195,196,198,199,201,203,204,
  206,208,209,211,213,214,216,218,219,221,223,225,226,228,230,232,
  233,235,237,239,240,242,244,246,248,250,251,253,255,257,259,261,
  263,265,267,269,271,273,274,276,278,280,282,284,286,288,291,293,
  295,297,299,301,303,305,307,309,311,314,316,318,320,322,324,327,
  329,331,333,336,338,340,342,345,347,349,351,354,356,358,361,363,
  365,368,370,373,375,377,380,382,385,387,390,392,395,397,400,402,
  405,407,410,412,415,417,420,423,425,428,430, 433,436,438,441,444,
  446,449,452,455,457,460,463,466,468,471,474,477,480,482,485,488,
  491,494,497,500,502,505,508,511,514,517,520,523,526,529,532,535,
  538,541,544,547,550,553,557,560,563,566,569,572,575,579,582,585,
  588,591,595,598,601,604,608,611,614,618,621,624,628,631,634,638,
  641,644,648,651,655,658,662,665,669,672,676,679,683,686,690,693,
  697,701,704,708,711,715,719,722,726,730,733,737,741,745,748,752,
  756,760,763,767,771,775,779,783,786,790,794,798,802,806,810,814,
  818,822,826,830,834,838,842,846,850,854,858,862,867,871,875,879,
  883,887,892,896,900,904,908,913,917,921,926,930,934,939,943,947,
  952,956,960,965,969,974,978,983,987,992,996,1001,1005,1010,1014,1019,
  1023,1028,1033,1037,1042,1047,1051,1056,1061,1065,1070,1075,1079,1084,1089,1094,
  1099,1103,1108,1113,1118,1123,1128,1133,1137,1142,1147,1152,1157,1162,1167,1172,
  1177,1182,1187,1192,1197,1202,1208,1213,1218,1223,1228,1233,1238,1244,1249,1254,
  1259,1265,1270,1275,1280,1286,1291,1296,1302,1307,1313,1318,1323,1329,1334,1340,
  1345,1351,1356,1362,1367,1373,1378,1384,1389,1395,1401,1406,1412,1418,1423,1429,
  1435,1440,1446,1452,1458,1463,1469,1475,1481,1487,1492,1498,1504,1510,1516,1522,
  1528,1534,1540,1546,1552,1558,1564,1570,1576,1582,1588,1594,1600,1606,1612,1619,
  1625,1631,1637,1643,1650,1656,1662,1668,1675,1681,1687,1694,1700,1706,1713,1719,
  1726,1732,1738,1745,1751,1758,1764,1771,1777,1784,1791,1797,1804,1810,1817,1824,
  1830,1837,1844,1850,1857,1864,1871,1877,1884,1891,1898,1905,1912,1918,1925,1932,
  1939,1946,1953,1960,1967,1974,1981,1988,1995,2002,2009,2016,2023,2031,2038,2045,
  2052,2059,2066,2074,2081,2088,2095,2103,2110,2117,2125,2132,2139,2147,2154,2162,
  2169,2176,2184,2191,2199,2206,2214,2221,2229,2237,2244,2252,2259,2267,2275,2282,
  2290,2298,2306,2313,2321,2329,2337,2345,2352,2360,2368,2376,2384,2392,2400,2408,
  2416,2424,2432,2440,2448,2456,2464,2472,2480,2488,2496,2504,2513,2521,2529,2537,
  2545,2554,2562,2570,2579,2587,2595,2604,2612,2620,2629,2637,2646,2654,2663,2671,
  2680,2688,2697,2705,2714,2722,2731,2740,2748,2757,2766,2774,2783,2792,2801,2809,
  2818,2827,2836,2845,2854,2863,2871,2880,2889,2898,2907,2916,2925,2934,2943,2952,
  2961,2971,2980,2989,2998,3007,3016,3026,3035,3044,3053,3063,3072,3081,3091,3100,
  3109,3119,3128,3137,3147,3156,3166,3175,3185,3194,3204,3214,3223,3233,3242,3252,
  3262,3271,3281,3291,3301,3310,3320,3330,3340,3350,3359,3369,3379,3389,3399,3409,
  3419,3429,3439,3449,3459,3469,3479,3489,3499,3509,3519,3530,3540,3550,3560,3571,
  3581,3591,3601,3612,3622,3632,3643,3653,3664,3674,3684,3695,3705,3716,3726,3737,
  3748,3758,3769,3779,3790,3801,3811,3822,3833,3844,3854,3865,3876,3887,3898,3908,
  3919,3930,3941,3952,3963,3974,3985,3996,4007,4018,4029,4040,4051,4062,4074,4085 };
*/

PCA9685::PCA9685() {}

void PCA9685::begin(int i2cAddress) {
	_i2cAddress = PCA9685_I2C_BASE_ADDRESS | (i2cAddress & B00111111);
}
bool PCA9685::init() {

	delay(1);
	writeRegister(PCA9685_MODE1, (byte)0x01);	// reset the device

	delay(1);
	bool isOnline;
	if (readRegister(PCA9685_MODE1)==0x01)	{
		isOnline = true;
	} else {
		isOnline = false;
	}
	writeRegister(PCA9685_MODE1, (byte)B10100000);	// set up for auto increment
	//writeRegister(PCA9685_MODE2, (byte)0x10);	// set to output
	writeRegister(PCA9685_MODE2, (byte)0x04);	// set to output
	
	return isOnline;
}

void PCA9685::setLEDOn(int ledNumber) {
	writeLED(ledNumber, 0x1000, 0);
}

void PCA9685::setLEDOff(int ledNumber) {
	writeLED(ledNumber, 0, 0x1000);
}

void PCA9685::setLEDDimmed(int ledNumber, int amount) {		// Amount from 0-100 (off-on)
	int nl = map(amount,0,255,0,PWM_VALUE);
	/*if (amount==0)	{
		setLEDOff(ledNumber);
	} else if (amount>=100) {
		setLEDOn(ledNumber);
	} else {
		int randNumber = (int)random(4096);	// Randomize the phaseshift to distribute load. Good idea? Hope so.
		writeLED(ledNumber, randNumber, (int)(amount*41+randNumber) & 0xFFF);
	}*/
	Serial.println( nl  );
	writeLED(ledNumber, 0, gamma_table[nl] );
}

void PCA9685::writeLED(int ledNumber, word LED_ON, word LED_OFF) {	// LED_ON and LED_OFF are 12bit values (0-4095); ledNumber is 0-15
	if (ledNumber >=0 && ledNumber <= 15)	{
		
		Wire.beginTransmission(_i2cAddress);
		Wire.write(PCA9685_LED0 + 4*ledNumber);

		Wire.write(lowByte(LED_ON));
		Wire.write(highByte(LED_ON));
		Wire.write(lowByte(LED_OFF));
		Wire.write(highByte(LED_OFF));
		
		Wire.endTransmission();
	}
}


//PRIVATE
void PCA9685::writeRegister(int regAddress, byte data) {
	Wire.beginTransmission(_i2cAddress);
	Wire.write(regAddress);
	Wire.write(data);
	Wire.endTransmission();
}

word PCA9685::readRegister(int regAddress) {
	word returnword = 0x00;
	Wire.beginTransmission(_i2cAddress);
	Wire.write(regAddress);
	Wire.endTransmission();
	Wire.requestFrom((int)_i2cAddress, 1);
    
//    int c=0;
	//Wait for our 2 bytes to become available
	while (Wire.available()) {
        //high byte
//        if (c==0)   { returnword = Wire.read() << 8; }
        //low byte
  //      if (c==1)   { 
		returnword |= Wire.read(); 
		//}
        //c++;
    }
    
	return returnword;
}
